version: "3"

services:
  
  postgres:
    container_name: postgres-server
    build:
      context: .
      dockerfile: ./postgreSQL/dockerfile
    environment:
      POSTGRES_USER : pguser
      POSTGRES_PASSWORD : password
      POSTGRES_DB : db
    volumes:
      #- ./db-data:/var/lib/postgresql/data
      - ./postgreSQL/table/create_table.sql:/postgres/table/
    restart: "always"
    expose:
      - "5432"
    ports:
      - "5432:5432"
    networks:
      - app-net

  golang:
    container_name: golang-server
    build: ./go
    depends_on:
      - postgres
    ports:
      - "8080:8080"
    volumes:
      - ./go/src:/src
    tty: true
    networks:
      - app-net

  nginx:
    image: nginx:latest
    container_name: nginx-server
    ports:
      - 8000:8000
    volumes:
      - ./nginx-server/html:/var/www/html
      - ./nginx-server/mime.types:/etc/nginx/mime.types
      - ./nginx-server/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - app-net
    depends_on:
      - golang

#  https-portal:
 #   image: steveltn/https-portal:1
  #  container_name: https
   # depends_on:
    #  - nginx
    #ports:
     # - '80:80'
      #- '443:443'
    #restart: always
    #environment:
     # DOMAINS: 'angoproject19.ga -> http://nginx:8000'
      # STAGE: 'production' # Don't use production until staging works
      # FORCE_RENEW: 'true'
    #volumes:
     # - ./ssl_certs:/var/lib/https-portal

volumes:
  ssl_certs:
  #db-data:
  logs:

networks:
  app-net:
    driver: bridge